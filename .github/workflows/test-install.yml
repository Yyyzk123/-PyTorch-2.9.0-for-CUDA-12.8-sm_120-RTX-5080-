name: Test Install PyTorch Wheel
on:
  push:         { branches: [ main ] }
  pull_request: { branches: [ main ] }

jobs:
  install-test:
    runs-on: ubuntu-latest

    container:                  # Ubuntu 24.04 + CUDA 12.8.1 + cuDNN
      image: nvidia/cuda:12.8.1-cudnn-runtime-ubuntu24.04

    steps:
    # 0️⃣ 拉仓库
    - uses: actions/checkout@v4
      name: Checkout repository

    # 1️⃣ 系统依赖（去掉 python3.10-venv/dev & libcudnn9）
    - name: Install system packages
      run: |
        set -e
        apt-get update -qq
        apt-get install -y --no-install-recommends \
            wget curl gnupg ca-certificates software-properties-common \
            libnuma1 libgomp1 libopenblas0-pthread libopenblas-dev \
            python3-pip
       

    # 2️⃣ 安装 micromamba 并创建 py310 env  （<5 MB，10 s 内完成）
    - name: Set up micromamba (Python 3.10)
      run: |
        curl -Ls https://micro.mamba.pm/api/micromamba/linux-64/latest | tar -xvj bin/micromamba
        ./bin/micromamba create -y -p $HOME/py310 python=3.10
        echo "$HOME/py310/bin" >> $GITHUB_PATH     # 让后续 step 用到的 python 指向 3.10

    # 3️⃣ 下载最新 .whl
    - name: Download wheel from latest GitHub release
      id: download
      run: |
        set -e
        mkdir -p dist
        RELEASE_URL=$(curl -s https://api.github.com/repos/${{ github.repository }}/releases/latest \
          | grep browser_download_url | grep '.whl"' | cut -d '"' -f 4)
        [ -z "$RELEASE_URL" ] && { echo "No release found."; exit 0; }
        WHEEL=$(basename "$RELEASE_URL")
        wget -q "$RELEASE_URL" -O dist/$WHEEL
        echo "WHEEL_NAME=$WHEEL" >> "$GITHUB_OUTPUT"
        sha256sum dist/$WHEEL

    # 4️⃣ 安装 .whl  + 其余依赖（此刻 PATH 已指向 py310）
    - name: Install wheel & deps
      if: steps.download.outputs.WHEEL_NAME
      run: |
        python -m pip install "dist/${{ steps.download.outputs.WHEEL_NAME }}"
        python -m pip install -r requirements.txt

    # 5️⃣ 运行 Demo & 打印环境
    - name: Verify installation
      run: |
        python examples/demo_tensor_cuda.py
        python - <<'PY'
        import torch, platform
        print("Python :", platform.python_version())
        print("Torch   :", torch.__version__)
        print("CUDA OK :", torch.cuda.is_available())
        print("Device  :", torch.cuda.get_device_name(0) if torch.cuda.is_available() else "CPU")
        print("sm arch :", torch.cuda.get_device_capability() if torch.cuda.is_available() else "N/A")
        PY

    - name: Final check
      if: always()
      run: echo "✅ CI passed — Believe in light!"
